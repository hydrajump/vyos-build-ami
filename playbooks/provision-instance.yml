---

# The play operates on the local (Ansible control) machine.
- name: Provision instance
  hosts: local
  connection: local
  gather_facts: True

  vars:
    key_pair_name: vyos-build-ami
    key_pair_file: "files/ssh-keys/{{ key_pair_name }}.pem"

    security_group_name: vyos-build-ami

    image_id: ami-59a4a230 # us-east-1 Ubuntu Server 12.04 LTS (PV) - Free tier eligible
    instance_type: t1.micro # Free tier eligible
    volume_size: 4 # GB

  tasks:
    # ---- Configure AWS account ----
    - name: Make sure that files/ssh-keys directory exists
      file: path=files/ssh-keys state=directory

    - name: Create an SSH key pair
      shell: aws ec2 create-key-pair
             --key-name {{ key_pair_name }}
             --query 'KeyMaterial' > {{ key_pair_file }}
             creates={{ key_pair_file }}

    - name: Change permissions on {{ key_pair_file }}
      file: path={{ key_pair_file }} mode=0400

    - name: Check if a security group has already been created by this playbook
      command: aws ec2 describe-security-groups --query 'SecurityGroups[*].GroupName'
      register: describe_security_groups

    - name: Create a security group
      command: aws ec2 create-security-group
               --group-name {{ security_group_name }}
               --description "This security group was generated by ansible playbook vyos_build_ami.yml"
               --vpc {{ vpc_id }}
      when: describe_security_groups is defined and
            describe_security_groups.stdout.find('{{ security_group_name }}') == -1

    - name :
      command: aws ec2 describe-security-groups
               --filters Name=vpc-id,Values="{{ vpc_id }}" Name=group-name,Values="{{ security_group_name }}"
               --query 'SecurityGroups[*].GroupId'
      register: describe_group_id

    # Restrict the security group inbound IP address to ansible control machine?
    - name: Add a rule to the security group that allows inbound SSH traffic
      command: aws ec2 authorize-security-group-ingress
               --group-id "{{ describe_group_id.stdout }}"
               --protocol tcp
               --port 22
               --cidr 0.0.0.0/0
      when: describe_security_groups is defined and
            describe_security_groups.stdout.find('{{ security_group_name }}') == -1

    # ---- Launch EC2 instance ----
    - name: Launch an EC2 instance {{ image_id }} {{ instance_type }}
      command: aws ec2 run-instances
               --image-id {{ image_id }}
               --key-name {{ key_pair_name }}
               --network-interfaces '[{"DeviceIndex":0, "SubnetId":"{{ pri_subnet_id }}", "Description":"VyOS Public", "Groups":["{{ describe_group_id.stdout }}"], "AssociatePublicIpAddress":true}]'
               --instance-type {{ instance_type }}
               --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"DeleteOnTermination":true,"VolumeType":"standard"}},{"DeviceName":"/dev/sdf","Ebs":{"VolumeSize":{{ volume_size }},"DeleteOnTermination":true,"VolumeType":"standard"}}]'
               --query 'Instances[*].InstanceId'
      register: instance_id

    - name: Wait for the instance to enter the "running" state
      command: aws ec2 describe-instances
               --instance-id {{ instance_id.stdout }}
               --query 'Reservations[*].Instances[*].State.Name'
      register: instance_state
      until: instance_state.stdout != "pending"
      retries: 6
      delay: 20

    - debug: msg="{{ instance_id.stdout }}"

    - name: Get the public DNS name of the instance
      command: aws ec2 describe-instances
               --instance-id {{ instance_id.stdout }}
               --query 'Reservations[*].Instances[*].PrivateIpAddress'
      register: instance_private_ip

    - name: Add instance's public DNS name to ansible host group ec2
      add_host: name={{ instance_private_ip.stdout }} groups=ec2

    - debug: msg="{{ instance_id.stdout }} | {{ instance_private_ip.stdout }}"

    - name: Add instance's SSH public key to known_hosts
      command: scripts/ssh-key.py {{ instance_id.stdout }} rsa

    - name: Wait for instance's SSH port to open
      wait_for: host={{ instance_private_ip.stdout }} port=22 delay=10 state=started
